{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\my-fullstack-app\\\\client\\\\src\\\\Product.jsx\",\n  _s = $RefreshSig$();\n// // import { useEffect, useState } from \"react\";\n\n// // function Product() {\n// //   const [products, setProducts] = useState([]);\n// //   const [categories, setCategories] = useState([]);\n// //   const [selectedCategory, setSelectedCategory] = useState(\"\");\n\n// //   const [form, setForm] = useState({\n// //     name: \"\",\n// //     description: \"\",\n// //     imageUrl: \"\",\n// //     price: \"\",\n// //     category: \"\",\n// //   });\n\n// //   const [newCategoryName, setNewCategoryName] = useState(\"\");\n// //   const [showCategoryInput, setShowCategoryInput] = useState(false);\n\n// //   useEffect(() => {\n// //     fetch(\"http://localhost:5000/api/products\")\n// //       .then((res) => res.json())\n// //       .then(setProducts);\n\n// //     fetch(\"http://localhost:5000/api/categories\")\n// //       .then((res) => res.json())\n// //       .then(setCategories);\n// //   }, []);\n\n// //   const addCategory = async () => {\n// //     if (!newCategoryName.trim()) return alert(\"Category name required\");\n\n// //     const res = await fetch(\"http://localhost:5000/api/categories\", {\n// //       method: \"POST\",\n// //       headers: { \"Content-Type\": \"application/json\" },\n// //       body: JSON.stringify({ name: newCategoryName }),\n// //     });\n\n// //     if (res.ok) {\n// //       const newCategory = await res.json();\n// //       setCategories([...categories, newCategory]);\n// //       setForm({ ...form, category: newCategory._id });\n// //       setNewCategoryName(\"\");\n// //       setShowCategoryInput(false);\n// //     } else {\n// //       const err = await res.json();\n// //       alert(err.message || \"Failed to add category\");\n// //     }\n// //   };\n\n// //   const addProduct = async (e) => {\n// //     e.preventDefault();\n\n// //     if (!form.category) {\n// //       alert(\"Please select a category\");\n// //       return;\n// //     }\n\n// //     const res = await fetch(\"http://localhost:5000/api/products\", {\n// //       method: \"POST\",\n// //       headers: { \"Content-Type\": \"application/json\" },\n// //       body: JSON.stringify(form),\n// //     });\n\n// //     if (res.ok) {\n// //       const newProduct = await res.json();\n// //       setProducts([...products, newProduct]);\n// //       setForm({\n// //         name: \"\",\n// //         description: \"\",\n// //         imageUrl: \"\",\n// //         price: \"\",\n// //         category: \"\",\n// //       });\n// //     } else {\n// //       const err = await res.json();\n// //       alert(err.message || \"Failed to add product\");\n// //     }\n// //   };\n\n// //   const deleteProduct = async (id) => {\n// //     if (!window.confirm(\"Are you sure?\")) return;\n// //     await fetch(`http://localhost:5000/api/products/${id}`, {\n// //       method: \"DELETE\",\n// //     });\n// //     setProducts(products.filter((p) => p._id !== id));\n// //   };\n\n// //   return (\n// //     <div className=\"p-6\">\n// //       <h1 className=\"text-2xl font-bold mb-4\">Add Product</h1>\n// //       <form onSubmit={addProduct} className=\"space-y-2\">\n// //         <input\n// //           type=\"text\"\n// //           value={form.name}\n// //           placeholder=\"Name\"\n// //           onChange={(e) => setForm({ ...form, name: e.target.value })}\n// //           className=\"w-full p-2 border rounded\"\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           value={form.description}\n// //           placeholder=\"Description\"\n// //           onChange={(e) => setForm({ ...form, description: e.target.value })}\n// //           className=\"w-full p-2 border rounded\"\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           value={form.imageUrl}\n// //           placeholder=\"Image URL\"\n// //           onChange={(e) => setForm({ ...form, imageUrl: e.target.value })}\n// //           className=\"w-full p-2 border rounded\"\n// //         />\n// //         <input\n// //           type=\"number\"\n// //           value={form.price}\n// //           placeholder=\"Price\"\n// //           onChange={(e) => setForm({ ...form, price: e.target.value })}\n// //           className=\"w-full p-2 border rounded\"\n// //         />\n\n// //         <select\n// //           value={form.category}\n// //           onChange={(e) => {\n// //             if (e.target.value === \"add_new\") {\n// //               setShowCategoryInput(true);\n// //               setForm({ ...form, category: \"\" });\n// //             } else {\n// //               setForm({ ...form, category: e.target.value });\n// //               setShowCategoryInput(false);\n// //               setNewCategoryName(\"\");\n// //             }\n// //           }}\n// //           className=\"w-full p-2 border rounded\"\n// //           required\n// //         >\n// //           <option value=\"\">Select Category</option>\n// //           {categories.map((cat) => (\n// //             <option key={cat._id} value={cat._id}>\n// //               {cat.name}\n// //             </option>\n// //           ))}\n// //           <option value=\"add_new\">+ Add new category...</option>\n// //         </select>\n\n// //         {showCategoryInput && (\n// //           <div className=\"flex gap-2\">\n// //             <input\n// //               type=\"text\"\n// //               placeholder=\"New category name\"\n// //               value={newCategoryName}\n// //               onChange={(e) => setNewCategoryName(e.target.value)}\n// //               className=\"flex-grow p-2 border rounded\"\n// //             />\n// //             <button\n// //               type=\"button\"\n// //               onClick={addCategory}\n// //               className=\"bg-green-600 text-white px-4 py-2 rounded\"\n// //             >\n// //               Save\n// //             </button>\n// //             <button\n// //               type=\"button\"\n// //               onClick={() => {\n// //                 setShowCategoryInput(false);\n// //                 setNewCategoryName(\"\");\n// //               }}\n// //               className=\"bg-gray-400 text-white px-4 py-2 rounded\"\n// //             >\n// //               Cancel\n// //             </button>\n// //           </div>\n// //         )}\n\n// //         <button className=\"bg-blue-600 text-white px-4 py-2 rounded\">\n// //           Add Product\n// //         </button>\n// //       </form>\n\n// //       <h2 className=\"text-xl font-semibold mt-6\">Filter Products</h2>\n// //       <select\n// //         onChange={(e) => setSelectedCategory(e.target.value)}\n// //         className=\"w-full p-2 border rounded mb-4\"\n// //       >\n// //         <option value=\"\">All</option>\n// //         {categories.map((cat) => (\n// //           <option key={cat._id} value={cat._id}>\n// //             {cat.name}\n// //           </option>\n// //         ))}\n// //       </select>\n\n// //       <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n// //         {products\n// //           .filter(\n// //             (p) => !selectedCategory || p.category?._id === selectedCategory\n// //           )\n// //           .map((p) => (\n// //             <div key={p._id} className=\"border p-4 rounded\">\n// //               <img\n// //                 src={p.imageUrl}\n// //                 alt={p.name}\n// //                 className=\"w-full h-40 object-cover mb-2\"\n// //               />\n// //               <h3 className=\"font-bold text-lg\">{p.name}</h3>\n// //               <p>{p.description}</p>\n// //               <p>${p.price}</p>\n// //               <p className=\"text-sm text-gray-500\">{p.category?.name}</p>\n// //               <button\n// //                 onClick={() => deleteProduct(p._id)}\n// //                 className=\"mt-2 bg-red-500 text-white px-3 py-1 rounded\"\n// //               >\n// //                 Delete\n// //               </button>\n// //             </div>\n// //           ))}\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // export default Product;\n// import { useEffect, useState } from \"react\";\n\n// function Product() {\n//   const [products, setProducts] = useState([]);\n//   const [categories, setCategories] = useState([]);\n//   const [selectedCategory, setSelectedCategory] = useState(\"\");\n\n//   const [form, setForm] = useState({\n//     name: \"\",\n//     description: \"\",\n//     imageUrl: \"\",\n//     price: \"\",\n//     category: \"\",\n//   });\n\n//   const [newCategoryName, setNewCategoryName] = useState(\"\");\n//   const [showCategoryInput, setShowCategoryInput] = useState(false);\n//   const [editingProductId, setEditingProductId] = useState(null);\n\n//   useEffect(() => {\n//     fetch(\"http://localhost:5000/api/products\")\n//       .then((res) => res.json())\n//       .then(setProducts);\n\n//     fetch(\"http://localhost:5000/api/categories\")\n//       .then((res) => res.json())\n//       .then(setCategories);\n//   }, []);\n\n//   const addCategory = async () => {\n//     if (!newCategoryName.trim()) return alert(\"Category name required\");\n\n//     const res = await fetch(\"http://localhost:5000/api/categories\", {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify({ name: newCategoryName }),\n//     });\n\n//     if (res.ok) {\n//       const newCategory = await res.json();\n//       setCategories([...categories, newCategory]);\n//       setForm({ ...form, category: newCategory._id });\n//       setNewCategoryName(\"\");\n//       setShowCategoryInput(false);\n//     } else {\n//       const err = await res.json();\n//       alert(err.message || \"Failed to add category\");\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!form.category) {\n//       alert(\"Please select a category\");\n//       return;\n//     }\n\n//     if (editingProductId) {\n//       const res = await fetch(\n//         `http://localhost:5000/api/products/${editingProductId}`,\n//         {\n//           method: \"PUT\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(form),\n//         }\n//       );\n\n//       if (res.ok) {\n//         const updated = await res.json();\n//         setProducts(products.map((p) => (p._id === updated._id ? updated : p)));\n//         resetForm();\n//       }\n//     } else {\n//       const res = await fetch(\"http://localhost:5000/api/products\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(form),\n//       });\n\n//       if (res.ok) {\n//         const newProduct = await res.json();\n//         setProducts([...products, newProduct]);\n//         resetForm();\n//       }\n//     }\n//   };\n\n//   const resetForm = () => {\n//     setForm({\n//       name: \"\",\n//       description: \"\",\n//       imageUrl: \"\",\n//       price: \"\",\n//       category: \"\",\n//     });\n//     setEditingProductId(null);\n//     setShowCategoryInput(false);\n//     setNewCategoryName(\"\");\n//   };\n\n//   const deleteProduct = async (id) => {\n//     if (!window.confirm(\"Are you sure?\")) return;\n//     await fetch(`http://localhost:5000/api/products/${id}`, {\n//       method: \"DELETE\",\n//     });\n//     setProducts(products.filter((p) => p._id !== id));\n//   };\n\n//   const editProduct = (product) => {\n//     setForm({\n//       name: product.name,\n//       description: product.description,\n//       imageUrl: product.imageUrl,\n//       price: product.price,\n//       category: product.category?._id || \"\",\n//     });\n//     setEditingProductId(product._id);\n//     setShowCategoryInput(false);\n//     setNewCategoryName(\"\");\n//   };\n\n//   return (\n//     <div className=\"p-6\">\n//       <h1 className=\"text-2xl font-bold mb-4\">\n//         {editingProductId ? \"Edit Product\" : \"Add Product\"}\n//       </h1>\n//       <form onSubmit={handleSubmit} className=\"space-y-2\">\n//         <input\n//           type=\"text\"\n//           value={form.name}\n//           placeholder=\"Name\"\n//           onChange={(e) => setForm({ ...form, name: e.target.value })}\n//           className=\"w-full p-2 border rounded\"\n//           required\n//         />\n//         <input\n//           type=\"text\"\n//           value={form.description}\n//           placeholder=\"Description\"\n//           onChange={(e) => setForm({ ...form, description: e.target.value })}\n//           className=\"w-full p-2 border rounded\"\n//           required\n//         />\n//         <input\n//           type=\"text\"\n//           value={form.imageUrl}\n//           placeholder=\"Image URL\"\n//           onChange={(e) => setForm({ ...form, imageUrl: e.target.value })}\n//           className=\"w-full p-2 border rounded\"\n//           required\n//         />\n//         <input\n//           type=\"number\"\n//           value={form.price}\n//           placeholder=\"Price\"\n//           onChange={(e) => setForm({ ...form, price: e.target.value })}\n//           className=\"w-full p-2 border rounded\"\n//           required\n//         />\n\n//         <select\n//           value={form.category}\n//           onChange={(e) => {\n//             if (e.target.value === \"add_new\") {\n//               setShowCategoryInput(true);\n//               setForm({ ...form, category: \"\" });\n//             } else {\n//               setForm({ ...form, category: e.target.value });\n//               setShowCategoryInput(false);\n//               setNewCategoryName(\"\");\n//             }\n//           }}\n//           className=\"w-full p-2 border rounded\"\n//           required\n//         >\n//           <option value=\"\">Select Category</option>\n//           {categories.map((cat) => (\n//             <option key={cat._id} value={cat._id}>\n//               {cat.name}\n//             </option>\n//           ))}\n//           <option value=\"add_new\">+ Add new category...</option>\n//         </select>\n\n//         {showCategoryInput && (\n//           <div className=\"flex gap-2\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"New category name\"\n//               value={newCategoryName}\n//               onChange={(e) => setNewCategoryName(e.target.value)}\n//               className=\"flex-grow p-2 border rounded\"\n//             />\n//             <button\n//               type=\"button\"\n//               onClick={addCategory}\n//               className=\"bg-green-600 text-white px-4 py-2 rounded\"\n//             >\n//               Save\n//             </button>\n//             <button\n//               type=\"button\"\n//               onClick={() => {\n//                 setShowCategoryInput(false);\n//                 setNewCategoryName(\"\");\n//               }}\n//               className=\"bg-gray-400 text-white px-4 py-2 rounded\"\n//             >\n//               Cancel\n//             </button>\n//           </div>\n//         )}\n\n//         <div className=\"flex gap-2\">\n//           <button\n//             type=\"submit\"\n//             className=\"bg-blue-600 text-white px-4 py-2 rounded\"\n//           >\n//             {editingProductId ? \"Update Product\" : \"Add Product\"}\n//           </button>\n//           {editingProductId && (\n//             <button\n//               type=\"button\"\n//               onClick={resetForm}\n//               className=\"bg-gray-500 text-white px-4 py-2 rounded\"\n//             >\n//               Cancel Edit\n//             </button>\n//           )}\n//         </div>\n//       </form>\n\n//       <h2 className=\"text-xl font-semibold mt-6\">Filter Products</h2>\n//       <select\n//         onChange={(e) => setSelectedCategory(e.target.value)}\n//         className=\"w-full p-2 border rounded mb-4\"\n//       >\n//         <option value=\"\">All</option>\n//         {categories.map((cat) => (\n//           <option key={cat._id} value={cat._id}>\n//             {cat.name}\n//           </option>\n//         ))}\n//       </select>\n\n//       <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n//         {products\n//           .filter(\n//             (p) => !selectedCategory || p.category?._id === selectedCategory\n//           )\n//           .map((p) => (\n//             <div key={p._id} className=\"border p-4 rounded\">\n//               <img\n//                 src={p.imageUrl}\n//                 alt={p.name}\n//                 className=\"w-full h-40 object-cover mb-2\"\n//               />\n//               <h3 className=\"font-bold text-lg\">{p.name}</h3>\n//               <p>{p.description}</p>\n//               <p>${p.price}</p>\n//               <p className=\"text-sm text-gray-500\">{p.category?.name}</p>\n//               <div className=\"flex gap-2 mt-2\">\n//                 <button\n//                   onClick={() => editProduct(p)}\n//                   className=\"bg-yellow-500 text-white px-3 py-1 rounded\"\n//                 >\n//                   Edit\n//                 </button>\n//                 <button\n//                   onClick={() => deleteProduct(p._id)}\n//                   className=\"bg-red-500 text-white px-3 py-1 rounded\"\n//                 >\n//                   Delete\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Product;\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Product() {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [form, setForm] = useState({\n    name: \"\",\n    description: \"\",\n    imageUrl: \"\",\n    price: \"\",\n    category: \"\"\n  });\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\n\n  // Fetch products and categories on mount\n  useEffect(() => {\n    fetchProducts();\n    fetchCategories();\n  }, []);\n  const fetchProducts = () => {\n    fetch(\"http://localhost:5000/api/products\").then(res => res.json()).then(setProducts).catch(err => console.error(\"Failed to fetch products:\", err));\n  };\n  const fetchCategories = () => {\n    fetch(\"http://localhost:5000/api/categories\").then(res => res.json()).then(setCategories).catch(err => console.error(\"Failed to fetch categories:\", err));\n  };\n\n  // Add a new product\n  const addProduct = async e => {\n    e.preventDefault();\n    if (!form.category) {\n      alert(\"Please select a category\");\n      return;\n    }\n    const res = await fetch(\"http://localhost:5000/api/products\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(form)\n    });\n    if (res.ok) {\n      const newProduct = await res.json();\n      setProducts([...products, newProduct]);\n      setForm({\n        name: \"\",\n        description: \"\",\n        imageUrl: \"\",\n        price: \"\",\n        category: \"\"\n      });\n    } else {\n      const errorData = await res.json();\n      alert(errorData.message || \"Failed to add product\");\n    }\n  };\n\n  // Add a new category\n  const addCategory = async e => {\n    e.preventDefault();\n    if (!newCategoryName.trim()) {\n      alert(\"Category name can't be empty\");\n      return;\n    }\n    const res = await fetch(\"http://localhost:5000/api/categories\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: newCategoryName\n      })\n    });\n    if (res.ok) {\n      const category = await res.json();\n      setCategories([...categories, category]);\n      setNewCategoryName(\"\");\n    } else {\n      const errorData = await res.json();\n      alert(errorData.message || \"Failed to add category\");\n    }\n  };\n  const deleteProduct = async id => {\n    if (!window.confirm(\"Are you sure?\")) return;\n    await fetch(`http://localhost:5000/api/products/${id}`, {\n      method: \"DELETE\"\n    });\n    setProducts(products.filter(p => p._id !== id));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-4xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Add Category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addCategory,\n      className: \"flex mb-6 gap-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"New Category Name\",\n        value: newCategoryName,\n        onChange: e => setNewCategoryName(e.target.value),\n        className: \"flex-grow p-2 border rounded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"bg-green-600 text-white px-4 py-2 rounded\",\n        children: \"Add Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Add Product\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addProduct,\n      className: \"space-y-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: form.name,\n        placeholder: \"Name\",\n        onChange: e => setForm({\n          ...form,\n          name: e.target.value\n        }),\n        className: \"w-full p-2 border rounded\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: form.description,\n        placeholder: \"Description\",\n        onChange: e => setForm({\n          ...form,\n          description: e.target.value\n        }),\n        className: \"w-full p-2 border rounded\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: form.imageUrl,\n        placeholder: \"Image URL\",\n        onChange: e => setForm({\n          ...form,\n          imageUrl: e.target.value\n        }),\n        className: \"w-full p-2 border rounded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: form.price,\n        placeholder: \"Price\",\n        onChange: e => setForm({\n          ...form,\n          price: e.target.value\n        }),\n        className: \"w-full p-2 border rounded\",\n        required: true,\n        min: \"0\",\n        step: \"0.01\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: form.category,\n        onChange: e => setForm({\n          ...form,\n          category: e.target.value\n        }),\n        className: \"w-full p-2 border rounded\",\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 11\n        }, this), categories.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: cat._id,\n          children: cat.name\n        }, cat._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-600 text-white px-4 py-2 rounded\",\n        children: \"Add Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold mt-6\",\n      children: \"Filter Products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 676,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setSelectedCategory(e.target.value),\n      className: \"w-full p-2 border rounded mb-4\",\n      value: selectedCategory,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 9\n      }, this), categories.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: cat._id,\n        children: cat.name\n      }, cat._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-3 gap-4\",\n      children: products.filter(p => {\n        var _p$category;\n        return !selectedCategory || ((_p$category = p.category) === null || _p$category === void 0 ? void 0 : _p$category._id) === selectedCategory;\n      }).map(p => {\n        var _p$category2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border p-4 rounded\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: p.imageUrl,\n            alt: p.name,\n            className: \"w-full h-40 object-cover mb-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"font-bold text-lg\",\n            children: p.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: p.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"$\", p.price]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500\",\n            children: (_p$category2 = p.category) === null || _p$category2 === void 0 ? void 0 : _p$category2.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteProduct(p._id),\n            className: \"mt-2 bg-red-500 text-white px-3 py-1 rounded\",\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 15\n          }, this)]\n        }, p._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 605,\n    columnNumber: 5\n  }, this);\n}\n_s(Product, \"a+RFq9rSGNNdDdwf3H7RtEmh30I=\");\n_c = Product;\nexport default Product;\nvar _c;\n$RefreshReg$(_c, \"Product\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Product","_s","products","setProducts","categories","setCategories","selectedCategory","setSelectedCategory","form","setForm","name","description","imageUrl","price","category","newCategoryName","setNewCategoryName","fetchProducts","fetchCategories","fetch","then","res","json","catch","err","console","error","addProduct","e","preventDefault","alert","method","headers","body","JSON","stringify","ok","newProduct","errorData","message","addCategory","trim","deleteProduct","id","window","confirm","filter","p","_id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","min","step","map","cat","_p$category","_p$category2","src","alt","onClick","_c","$RefreshReg$"],"sources":["C:/Users/dell/Desktop/my-fullstack-app/client/src/Product.jsx"],"sourcesContent":["// // import { useEffect, useState } from \"react\";\r\n\r\n// // function Product() {\r\n// //   const [products, setProducts] = useState([]);\r\n// //   const [categories, setCategories] = useState([]);\r\n// //   const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n\r\n// //   const [form, setForm] = useState({\r\n// //     name: \"\",\r\n// //     description: \"\",\r\n// //     imageUrl: \"\",\r\n// //     price: \"\",\r\n// //     category: \"\",\r\n// //   });\r\n\r\n// //   const [newCategoryName, setNewCategoryName] = useState(\"\");\r\n// //   const [showCategoryInput, setShowCategoryInput] = useState(false);\r\n\r\n// //   useEffect(() => {\r\n// //     fetch(\"http://localhost:5000/api/products\")\r\n// //       .then((res) => res.json())\r\n// //       .then(setProducts);\r\n\r\n// //     fetch(\"http://localhost:5000/api/categories\")\r\n// //       .then((res) => res.json())\r\n// //       .then(setCategories);\r\n// //   }, []);\r\n\r\n// //   const addCategory = async () => {\r\n// //     if (!newCategoryName.trim()) return alert(\"Category name required\");\r\n\r\n// //     const res = await fetch(\"http://localhost:5000/api/categories\", {\r\n// //       method: \"POST\",\r\n// //       headers: { \"Content-Type\": \"application/json\" },\r\n// //       body: JSON.stringify({ name: newCategoryName }),\r\n// //     });\r\n\r\n// //     if (res.ok) {\r\n// //       const newCategory = await res.json();\r\n// //       setCategories([...categories, newCategory]);\r\n// //       setForm({ ...form, category: newCategory._id });\r\n// //       setNewCategoryName(\"\");\r\n// //       setShowCategoryInput(false);\r\n// //     } else {\r\n// //       const err = await res.json();\r\n// //       alert(err.message || \"Failed to add category\");\r\n// //     }\r\n// //   };\r\n\r\n// //   const addProduct = async (e) => {\r\n// //     e.preventDefault();\r\n\r\n// //     if (!form.category) {\r\n// //       alert(\"Please select a category\");\r\n// //       return;\r\n// //     }\r\n\r\n// //     const res = await fetch(\"http://localhost:5000/api/products\", {\r\n// //       method: \"POST\",\r\n// //       headers: { \"Content-Type\": \"application/json\" },\r\n// //       body: JSON.stringify(form),\r\n// //     });\r\n\r\n// //     if (res.ok) {\r\n// //       const newProduct = await res.json();\r\n// //       setProducts([...products, newProduct]);\r\n// //       setForm({\r\n// //         name: \"\",\r\n// //         description: \"\",\r\n// //         imageUrl: \"\",\r\n// //         price: \"\",\r\n// //         category: \"\",\r\n// //       });\r\n// //     } else {\r\n// //       const err = await res.json();\r\n// //       alert(err.message || \"Failed to add product\");\r\n// //     }\r\n// //   };\r\n\r\n// //   const deleteProduct = async (id) => {\r\n// //     if (!window.confirm(\"Are you sure?\")) return;\r\n// //     await fetch(`http://localhost:5000/api/products/${id}`, {\r\n// //       method: \"DELETE\",\r\n// //     });\r\n// //     setProducts(products.filter((p) => p._id !== id));\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"p-6\">\r\n// //       <h1 className=\"text-2xl font-bold mb-4\">Add Product</h1>\r\n// //       <form onSubmit={addProduct} className=\"space-y-2\">\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           value={form.name}\r\n// //           placeholder=\"Name\"\r\n// //           onChange={(e) => setForm({ ...form, name: e.target.value })}\r\n// //           className=\"w-full p-2 border rounded\"\r\n// //         />\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           value={form.description}\r\n// //           placeholder=\"Description\"\r\n// //           onChange={(e) => setForm({ ...form, description: e.target.value })}\r\n// //           className=\"w-full p-2 border rounded\"\r\n// //         />\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           value={form.imageUrl}\r\n// //           placeholder=\"Image URL\"\r\n// //           onChange={(e) => setForm({ ...form, imageUrl: e.target.value })}\r\n// //           className=\"w-full p-2 border rounded\"\r\n// //         />\r\n// //         <input\r\n// //           type=\"number\"\r\n// //           value={form.price}\r\n// //           placeholder=\"Price\"\r\n// //           onChange={(e) => setForm({ ...form, price: e.target.value })}\r\n// //           className=\"w-full p-2 border rounded\"\r\n// //         />\r\n\r\n// //         <select\r\n// //           value={form.category}\r\n// //           onChange={(e) => {\r\n// //             if (e.target.value === \"add_new\") {\r\n// //               setShowCategoryInput(true);\r\n// //               setForm({ ...form, category: \"\" });\r\n// //             } else {\r\n// //               setForm({ ...form, category: e.target.value });\r\n// //               setShowCategoryInput(false);\r\n// //               setNewCategoryName(\"\");\r\n// //             }\r\n// //           }}\r\n// //           className=\"w-full p-2 border rounded\"\r\n// //           required\r\n// //         >\r\n// //           <option value=\"\">Select Category</option>\r\n// //           {categories.map((cat) => (\r\n// //             <option key={cat._id} value={cat._id}>\r\n// //               {cat.name}\r\n// //             </option>\r\n// //           ))}\r\n// //           <option value=\"add_new\">+ Add new category...</option>\r\n// //         </select>\r\n\r\n// //         {showCategoryInput && (\r\n// //           <div className=\"flex gap-2\">\r\n// //             <input\r\n// //               type=\"text\"\r\n// //               placeholder=\"New category name\"\r\n// //               value={newCategoryName}\r\n// //               onChange={(e) => setNewCategoryName(e.target.value)}\r\n// //               className=\"flex-grow p-2 border rounded\"\r\n// //             />\r\n// //             <button\r\n// //               type=\"button\"\r\n// //               onClick={addCategory}\r\n// //               className=\"bg-green-600 text-white px-4 py-2 rounded\"\r\n// //             >\r\n// //               Save\r\n// //             </button>\r\n// //             <button\r\n// //               type=\"button\"\r\n// //               onClick={() => {\r\n// //                 setShowCategoryInput(false);\r\n// //                 setNewCategoryName(\"\");\r\n// //               }}\r\n// //               className=\"bg-gray-400 text-white px-4 py-2 rounded\"\r\n// //             >\r\n// //               Cancel\r\n// //             </button>\r\n// //           </div>\r\n// //         )}\r\n\r\n// //         <button className=\"bg-blue-600 text-white px-4 py-2 rounded\">\r\n// //           Add Product\r\n// //         </button>\r\n// //       </form>\r\n\r\n// //       <h2 className=\"text-xl font-semibold mt-6\">Filter Products</h2>\r\n// //       <select\r\n// //         onChange={(e) => setSelectedCategory(e.target.value)}\r\n// //         className=\"w-full p-2 border rounded mb-4\"\r\n// //       >\r\n// //         <option value=\"\">All</option>\r\n// //         {categories.map((cat) => (\r\n// //           <option key={cat._id} value={cat._id}>\r\n// //             {cat.name}\r\n// //           </option>\r\n// //         ))}\r\n// //       </select>\r\n\r\n// //       <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n// //         {products\r\n// //           .filter(\r\n// //             (p) => !selectedCategory || p.category?._id === selectedCategory\r\n// //           )\r\n// //           .map((p) => (\r\n// //             <div key={p._id} className=\"border p-4 rounded\">\r\n// //               <img\r\n// //                 src={p.imageUrl}\r\n// //                 alt={p.name}\r\n// //                 className=\"w-full h-40 object-cover mb-2\"\r\n// //               />\r\n// //               <h3 className=\"font-bold text-lg\">{p.name}</h3>\r\n// //               <p>{p.description}</p>\r\n// //               <p>${p.price}</p>\r\n// //               <p className=\"text-sm text-gray-500\">{p.category?.name}</p>\r\n// //               <button\r\n// //                 onClick={() => deleteProduct(p._id)}\r\n// //                 className=\"mt-2 bg-red-500 text-white px-3 py-1 rounded\"\r\n// //               >\r\n// //                 Delete\r\n// //               </button>\r\n// //             </div>\r\n// //           ))}\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default Product;\r\n// import { useEffect, useState } from \"react\";\r\n\r\n// function Product() {\r\n//   const [products, setProducts] = useState([]);\r\n//   const [categories, setCategories] = useState([]);\r\n//   const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n\r\n//   const [form, setForm] = useState({\r\n//     name: \"\",\r\n//     description: \"\",\r\n//     imageUrl: \"\",\r\n//     price: \"\",\r\n//     category: \"\",\r\n//   });\r\n\r\n//   const [newCategoryName, setNewCategoryName] = useState(\"\");\r\n//   const [showCategoryInput, setShowCategoryInput] = useState(false);\r\n//   const [editingProductId, setEditingProductId] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     fetch(\"http://localhost:5000/api/products\")\r\n//       .then((res) => res.json())\r\n//       .then(setProducts);\r\n\r\n//     fetch(\"http://localhost:5000/api/categories\")\r\n//       .then((res) => res.json())\r\n//       .then(setCategories);\r\n//   }, []);\r\n\r\n//   const addCategory = async () => {\r\n//     if (!newCategoryName.trim()) return alert(\"Category name required\");\r\n\r\n//     const res = await fetch(\"http://localhost:5000/api/categories\", {\r\n//       method: \"POST\",\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//       body: JSON.stringify({ name: newCategoryName }),\r\n//     });\r\n\r\n//     if (res.ok) {\r\n//       const newCategory = await res.json();\r\n//       setCategories([...categories, newCategory]);\r\n//       setForm({ ...form, category: newCategory._id });\r\n//       setNewCategoryName(\"\");\r\n//       setShowCategoryInput(false);\r\n//     } else {\r\n//       const err = await res.json();\r\n//       alert(err.message || \"Failed to add category\");\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     if (!form.category) {\r\n//       alert(\"Please select a category\");\r\n//       return;\r\n//     }\r\n\r\n//     if (editingProductId) {\r\n//       const res = await fetch(\r\n//         `http://localhost:5000/api/products/${editingProductId}`,\r\n//         {\r\n//           method: \"PUT\",\r\n//           headers: { \"Content-Type\": \"application/json\" },\r\n//           body: JSON.stringify(form),\r\n//         }\r\n//       );\r\n\r\n//       if (res.ok) {\r\n//         const updated = await res.json();\r\n//         setProducts(products.map((p) => (p._id === updated._id ? updated : p)));\r\n//         resetForm();\r\n//       }\r\n//     } else {\r\n//       const res = await fetch(\"http://localhost:5000/api/products\", {\r\n//         method: \"POST\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify(form),\r\n//       });\r\n\r\n//       if (res.ok) {\r\n//         const newProduct = await res.json();\r\n//         setProducts([...products, newProduct]);\r\n//         resetForm();\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const resetForm = () => {\r\n//     setForm({\r\n//       name: \"\",\r\n//       description: \"\",\r\n//       imageUrl: \"\",\r\n//       price: \"\",\r\n//       category: \"\",\r\n//     });\r\n//     setEditingProductId(null);\r\n//     setShowCategoryInput(false);\r\n//     setNewCategoryName(\"\");\r\n//   };\r\n\r\n//   const deleteProduct = async (id) => {\r\n//     if (!window.confirm(\"Are you sure?\")) return;\r\n//     await fetch(`http://localhost:5000/api/products/${id}`, {\r\n//       method: \"DELETE\",\r\n//     });\r\n//     setProducts(products.filter((p) => p._id !== id));\r\n//   };\r\n\r\n//   const editProduct = (product) => {\r\n//     setForm({\r\n//       name: product.name,\r\n//       description: product.description,\r\n//       imageUrl: product.imageUrl,\r\n//       price: product.price,\r\n//       category: product.category?._id || \"\",\r\n//     });\r\n//     setEditingProductId(product._id);\r\n//     setShowCategoryInput(false);\r\n//     setNewCategoryName(\"\");\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"p-6\">\r\n//       <h1 className=\"text-2xl font-bold mb-4\">\r\n//         {editingProductId ? \"Edit Product\" : \"Add Product\"}\r\n//       </h1>\r\n//       <form onSubmit={handleSubmit} className=\"space-y-2\">\r\n//         <input\r\n//           type=\"text\"\r\n//           value={form.name}\r\n//           placeholder=\"Name\"\r\n//           onChange={(e) => setForm({ ...form, name: e.target.value })}\r\n//           className=\"w-full p-2 border rounded\"\r\n//           required\r\n//         />\r\n//         <input\r\n//           type=\"text\"\r\n//           value={form.description}\r\n//           placeholder=\"Description\"\r\n//           onChange={(e) => setForm({ ...form, description: e.target.value })}\r\n//           className=\"w-full p-2 border rounded\"\r\n//           required\r\n//         />\r\n//         <input\r\n//           type=\"text\"\r\n//           value={form.imageUrl}\r\n//           placeholder=\"Image URL\"\r\n//           onChange={(e) => setForm({ ...form, imageUrl: e.target.value })}\r\n//           className=\"w-full p-2 border rounded\"\r\n//           required\r\n//         />\r\n//         <input\r\n//           type=\"number\"\r\n//           value={form.price}\r\n//           placeholder=\"Price\"\r\n//           onChange={(e) => setForm({ ...form, price: e.target.value })}\r\n//           className=\"w-full p-2 border rounded\"\r\n//           required\r\n//         />\r\n\r\n//         <select\r\n//           value={form.category}\r\n//           onChange={(e) => {\r\n//             if (e.target.value === \"add_new\") {\r\n//               setShowCategoryInput(true);\r\n//               setForm({ ...form, category: \"\" });\r\n//             } else {\r\n//               setForm({ ...form, category: e.target.value });\r\n//               setShowCategoryInput(false);\r\n//               setNewCategoryName(\"\");\r\n//             }\r\n//           }}\r\n//           className=\"w-full p-2 border rounded\"\r\n//           required\r\n//         >\r\n//           <option value=\"\">Select Category</option>\r\n//           {categories.map((cat) => (\r\n//             <option key={cat._id} value={cat._id}>\r\n//               {cat.name}\r\n//             </option>\r\n//           ))}\r\n//           <option value=\"add_new\">+ Add new category...</option>\r\n//         </select>\r\n\r\n//         {showCategoryInput && (\r\n//           <div className=\"flex gap-2\">\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"New category name\"\r\n//               value={newCategoryName}\r\n//               onChange={(e) => setNewCategoryName(e.target.value)}\r\n//               className=\"flex-grow p-2 border rounded\"\r\n//             />\r\n//             <button\r\n//               type=\"button\"\r\n//               onClick={addCategory}\r\n//               className=\"bg-green-600 text-white px-4 py-2 rounded\"\r\n//             >\r\n//               Save\r\n//             </button>\r\n//             <button\r\n//               type=\"button\"\r\n//               onClick={() => {\r\n//                 setShowCategoryInput(false);\r\n//                 setNewCategoryName(\"\");\r\n//               }}\r\n//               className=\"bg-gray-400 text-white px-4 py-2 rounded\"\r\n//             >\r\n//               Cancel\r\n//             </button>\r\n//           </div>\r\n//         )}\r\n\r\n//         <div className=\"flex gap-2\">\r\n//           <button\r\n//             type=\"submit\"\r\n//             className=\"bg-blue-600 text-white px-4 py-2 rounded\"\r\n//           >\r\n//             {editingProductId ? \"Update Product\" : \"Add Product\"}\r\n//           </button>\r\n//           {editingProductId && (\r\n//             <button\r\n//               type=\"button\"\r\n//               onClick={resetForm}\r\n//               className=\"bg-gray-500 text-white px-4 py-2 rounded\"\r\n//             >\r\n//               Cancel Edit\r\n//             </button>\r\n//           )}\r\n//         </div>\r\n//       </form>\r\n\r\n//       <h2 className=\"text-xl font-semibold mt-6\">Filter Products</h2>\r\n//       <select\r\n//         onChange={(e) => setSelectedCategory(e.target.value)}\r\n//         className=\"w-full p-2 border rounded mb-4\"\r\n//       >\r\n//         <option value=\"\">All</option>\r\n//         {categories.map((cat) => (\r\n//           <option key={cat._id} value={cat._id}>\r\n//             {cat.name}\r\n//           </option>\r\n//         ))}\r\n//       </select>\r\n\r\n//       <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n//         {products\r\n//           .filter(\r\n//             (p) => !selectedCategory || p.category?._id === selectedCategory\r\n//           )\r\n//           .map((p) => (\r\n//             <div key={p._id} className=\"border p-4 rounded\">\r\n//               <img\r\n//                 src={p.imageUrl}\r\n//                 alt={p.name}\r\n//                 className=\"w-full h-40 object-cover mb-2\"\r\n//               />\r\n//               <h3 className=\"font-bold text-lg\">{p.name}</h3>\r\n//               <p>{p.description}</p>\r\n//               <p>${p.price}</p>\r\n//               <p className=\"text-sm text-gray-500\">{p.category?.name}</p>\r\n//               <div className=\"flex gap-2 mt-2\">\r\n//                 <button\r\n//                   onClick={() => editProduct(p)}\r\n//                   className=\"bg-yellow-500 text-white px-3 py-1 rounded\"\r\n//                 >\r\n//                   Edit\r\n//                 </button>\r\n//                 <button\r\n//                   onClick={() => deleteProduct(p._id)}\r\n//                   className=\"bg-red-500 text-white px-3 py-1 rounded\"\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Product;\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction Product() {\r\n  const [products, setProducts] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n\r\n  const [form, setForm] = useState({\r\n    name: \"\",\r\n    description: \"\",\r\n    imageUrl: \"\",\r\n    price: \"\",\r\n    category: \"\",\r\n  });\r\n\r\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\r\n\r\n  // Fetch products and categories on mount\r\n  useEffect(() => {\r\n    fetchProducts();\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  const fetchProducts = () => {\r\n    fetch(\"http://localhost:5000/api/products\")\r\n      .then((res) => res.json())\r\n      .then(setProducts)\r\n      .catch((err) => console.error(\"Failed to fetch products:\", err));\r\n  };\r\n\r\n  const fetchCategories = () => {\r\n    fetch(\"http://localhost:5000/api/categories\")\r\n      .then((res) => res.json())\r\n      .then(setCategories)\r\n      .catch((err) => console.error(\"Failed to fetch categories:\", err));\r\n  };\r\n\r\n  // Add a new product\r\n  const addProduct = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!form.category) {\r\n      alert(\"Please select a category\");\r\n      return;\r\n    }\r\n\r\n    const res = await fetch(\"http://localhost:5000/api/products\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(form),\r\n    });\r\n\r\n    if (res.ok) {\r\n      const newProduct = await res.json();\r\n      setProducts([...products, newProduct]);\r\n      setForm({\r\n        name: \"\",\r\n        description: \"\",\r\n        imageUrl: \"\",\r\n        price: \"\",\r\n        category: \"\",\r\n      });\r\n    } else {\r\n      const errorData = await res.json();\r\n      alert(errorData.message || \"Failed to add product\");\r\n    }\r\n  };\r\n\r\n  // Add a new category\r\n  const addCategory = async (e) => {\r\n    e.preventDefault();\r\n    if (!newCategoryName.trim()) {\r\n      alert(\"Category name can't be empty\");\r\n      return;\r\n    }\r\n    const res = await fetch(\"http://localhost:5000/api/categories\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ name: newCategoryName }),\r\n    });\r\n    if (res.ok) {\r\n      const category = await res.json();\r\n      setCategories([...categories, category]);\r\n      setNewCategoryName(\"\");\r\n    } else {\r\n      const errorData = await res.json();\r\n      alert(errorData.message || \"Failed to add category\");\r\n    }\r\n  };\r\n\r\n  const deleteProduct = async (id) => {\r\n    if (!window.confirm(\"Are you sure?\")) return;\r\n    await fetch(`http://localhost:5000/api/products/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    setProducts(products.filter((p) => p._id !== id));\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 max-w-4xl mx-auto\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Add Category</h1>\r\n      <form onSubmit={addCategory} className=\"flex mb-6 gap-2\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"New Category Name\"\r\n          value={newCategoryName}\r\n          onChange={(e) => setNewCategoryName(e.target.value)}\r\n          className=\"flex-grow p-2 border rounded\"\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          className=\"bg-green-600 text-white px-4 py-2 rounded\"\r\n        >\r\n          Add Category\r\n        </button>\r\n      </form>\r\n\r\n      <h1 className=\"text-2xl font-bold mb-4\">Add Product</h1>\r\n      <form onSubmit={addProduct} className=\"space-y-2\">\r\n        <input\r\n          type=\"text\"\r\n          value={form.name}\r\n          placeholder=\"Name\"\r\n          onChange={(e) => setForm({ ...form, name: e.target.value })}\r\n          className=\"w-full p-2 border rounded\"\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          value={form.description}\r\n          placeholder=\"Description\"\r\n          onChange={(e) => setForm({ ...form, description: e.target.value })}\r\n          className=\"w-full p-2 border rounded\"\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          value={form.imageUrl}\r\n          placeholder=\"Image URL\"\r\n          onChange={(e) => setForm({ ...form, imageUrl: e.target.value })}\r\n          className=\"w-full p-2 border rounded\"\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          value={form.price}\r\n          placeholder=\"Price\"\r\n          onChange={(e) => setForm({ ...form, price: e.target.value })}\r\n          className=\"w-full p-2 border rounded\"\r\n          required\r\n          min=\"0\"\r\n          step=\"0.01\"\r\n        />\r\n        <select\r\n          value={form.category}\r\n          onChange={(e) => setForm({ ...form, category: e.target.value })}\r\n          className=\"w-full p-2 border rounded\"\r\n          required\r\n        >\r\n          <option value=\"\">Select Category</option>\r\n          {categories.map((cat) => (\r\n            <option key={cat._id} value={cat._id}>\r\n              {cat.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <button className=\"bg-blue-600 text-white px-4 py-2 rounded\">\r\n          Add Product\r\n        </button>\r\n      </form>\r\n\r\n      <h2 className=\"text-xl font-semibold mt-6\">Filter Products</h2>\r\n      <select\r\n        onChange={(e) => setSelectedCategory(e.target.value)}\r\n        className=\"w-full p-2 border rounded mb-4\"\r\n        value={selectedCategory}\r\n      >\r\n        <option value=\"\">All</option>\r\n        {categories.map((cat) => (\r\n          <option key={cat._id} value={cat._id}>\r\n            {cat.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        {products\r\n          .filter(\r\n            (p) => !selectedCategory || p.category?._id === selectedCategory\r\n          )\r\n          .map((p) => (\r\n            <div key={p._id} className=\"border p-4 rounded\">\r\n              <img\r\n                src={p.imageUrl}\r\n                alt={p.name}\r\n                className=\"w-full h-40 object-cover mb-2\"\r\n              />\r\n              <h3 className=\"font-bold text-lg\">{p.name}</h3>\r\n              <p>{p.description}</p>\r\n              <p>${p.price}</p>\r\n              <p className=\"text-sm text-gray-500\">{p.category?.name}</p>\r\n              <button\r\n                onClick={() => deleteProduct(p._id)}\r\n                className=\"mt-2 bg-red-500 text-white px-3 py-1 rounded\"\r\n              >\r\n                Delete\r\n              </button>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Product;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}